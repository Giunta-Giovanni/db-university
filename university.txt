

------------------------QUERY SELECT---------------------------
1. Selezionare tutti gli studenti nati nel 1990 (160)
SELECT
FROM students
WHERE year(`date_of_birth`) = 1990;

2. Selezionare tutti i corsi che valgono più di 10 crediti (479)
SELECT*
FROM courses
WHERE `cfu` > 10

3. Selezionare tutti gli studenti che hanno più di 30 anni
SELECT*
FROM students
WHERE TIMESTAMPDIFF(YEAR,date_of_birth,CURDATE())>30

4. Selezionare tutti i corsi del primo semestre del primo anno di un qualsiasi corso di laurea (286)
SELECT *
FROM courses
WHERE year = 1 
AND period = 'I semestre';

5. Selezionare tutti gli appelli d'esame che avvengono nel pomeriggio (dopo le 14) del 20/06/2020 (21)

SELECT*
FROM exams
WHERE date BETWEEN '2020-06-20' AND '2020-06-20'
AND hour BETWEEN '14:00:00' AND '23:59:59'

6. Selezionare tutti i corsi di laurea magistrale (38)
SELECT*
FROM degrees
WHERE level = 'magistrale'

7. Da quanti dipartimenti è composta l'università? (12)
SELECT COUNT(name)
FROM departments


8. Quanti sono gli insegnanti che non hanno un numero di telefono? (50)
SELECT *
FROM teachers
WHERE phone IS null

------------------------QUERY GROUP---------------------------
1. Contare quanti iscritti ci sono stati ogni anno
SELECT YEAR(enrolment_date), COUNT(*)
FROM students
GROUP BY YEAR(enrolment_date)

2. Contare gli insegnanti che hanno l'ufficio nello stesso edificio
SELECT office_address, count(*) AS same_address
FROM teachers
GROUP BY office_address;

3. Calcolare la media dei voti di ogni appello d'esame
SELECT exam_id, AVG(vote) AS media_appello
FROM exam_student
GROUP BY exam_id

4. Contare quanti corsi di laurea ci sono per ogni dipartimento
SELECT department_id, COUNT(name) AS numero_corsi
FROM degrees
GROUP BY department_id

------------------------QUERY WITH JOIN---------------------------
1. Selezionare tutti gli studenti iscritti al Corso di Laurea in Economia
SELECT 
	students.id AS id_studente,
    students.name AS nome,
    students.surname AS cognome,
    degrees.name AS corso_di_laurea
FROM students
JOIN degrees ON students.degree_id = degrees.id
WHERE degrees.name = 'Corso di Laurea in Economia';

2. Selezionare tutti i Corsi di Laurea Magistrale del Dipartimento di
Neuroscienze
SELECT
	degrees.name AS corso_di_laurea,
    degrees.level,
    departments.name AS dipartimento
FROM degrees
JOIN departments ON degrees.department_id = departments.id
WHERE departments.name = 'Dipartimento di Neuroscienze' 
AND degrees.level = 'magistrale';

3. Selezionare tutti i corsi in cui insegna Fulvio Amato (id=44)
SELECT
	teachers.id AS id_teacher,
	teachers.name,
    teachers.surname,
    courses.name AS nome_corso
FROM teachers
JOIN course_teacher ON teachers.id = course_teacher.teacher_id
JOIN courses ON courses.id = course_teacher.course_id
WHERE teachers.id = 44

4. Selezionare tutti gli studenti con i dati relativi al corso di laurea a cui
sono iscritti e il relativo dipartimento, in ordine alfabetico per cognome e
nome
SELECT 
	students.registration_number AS student_code,
	students.surname,
    students.name,
    degrees.name AS degrees,
    departments.name AS department    
FROM students
JOIN degrees ON students.degree_id = degrees.id
JOIN departments ON degrees.department_id = departments.id
ORDER BY students.surname, students.name ASC

5. Selezionare tutti i corsi di laurea con i relativi corsi e insegnanti
SELECT
	degrees.name AS corsi_di_laurea,
    courses.name AS corso,
    teachers.name AS nome_insegante,
    teachers.surname AS cognome_insegnante
FROM degrees
JOIN courses ON degrees.id = courses.degree_id
JOIN course_teacher ON courses.id = course_teacher.course_id
JOIN teachers ON teachers.id = course_teacher.teacher_id

6. Selezionare tutti i docenti che insegnano nel Dipartimento di
Matematica (54)
SELECT DISTINCT
    teachers.name AS nome_insegnante,
    teachers.surname AS cognome_insegnante,
    departments.name AS dipartimento
FROM teachers
JOIN course_teacher ON teachers.id = course_teacher.teacher_id
JOIN courses ON courses.id = course_teacher.course_id
JOIN degrees ON degrees.id = courses.degree_id
JOIN departments On departments.id = degrees.department_id
WHERE departments.name = 'Dipartimento di Matematica'

7. BONUS: Selezionare per ogni studente il numero di tentativi sostenuti
per ogni esame, stampando anche il voto massimo. Successivamente,
filtrare i tentativi con voto minimo 18
SELECT
	students.id AS id_studente,
    students.name,
    students.surname,
	COUNT(exam_student.exam_id) AS tentativi,
	MAX(exam_student.vote) AS vote,
    courses.name AS corso

FROM students
JOIN exam_student ON students.id = exam_student.student_id
JOIN exams ON exams.id = exam_student.exam_id
JOIN courses ON courses.id = exams.course_id
GROUP BY students.id, courses.id
HAVING vote >= 18;